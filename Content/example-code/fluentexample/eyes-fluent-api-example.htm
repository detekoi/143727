<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
    </head>
    <body>
        <h1 class="title">Eyes check fluent API examples</h1>
        <p>
            <MadCap:xref href="../../0quickInserts/under-construction.htm">This Page is Under-Construction</MadCap:xref>
        </p>
        <p>In many cases, an applications page can be visually tested by simply grabbing a screenshot of the page and matching it to the baseline image. However, sometimes, pages have dynamic features that make visual testing more challenging. The Eyes SDK&#160;provides methods  to  implement effective visual tests of pages that have dynamic content, positioning, color, or timing. This article demonstrates these capabilities with an example test of an online application for the ACME&#160;company - see<span class="tbd"> </span><a class="tbd link" href="https://afternoon-savannah-68940.herokuapp.com/">https://afternoon-savannah-68940.herokuapp.com/</a><span class="tbd"> TBD&#160;REF</span></p>
        <div>In the test we will describe how to use the SDK <MadCap:snippetText src="../../0quickInserts/lookupname.flsnp" MadCap:snippetVariables="MPLD.mpld-lookupname:eyes$check," /> fluent API to:
        <ol class="numbered-list"><li>Check fields whose content can be different on every run.</li><li>Check windows with large scrolling regions.</li><li>Deal with mismatch artifacts caused by blinking cursors.</li><li>Check only a particular region of a window.</li><li>Check different part of the window with different match level sensitivity.</li><li>Check a window when the window rendering time is long or non deterministic.</li></ol></div>
        <p class="sub-header">Example 1 : A simple test of an entire window</p><pre class="mpld-section" data-mpld-section="login-page"></pre>
        <p class="sub-header">&#160;</p>
        <p>We use the driver to surf to the web application login page and then we call the <MadCap:snippetText src="../../0quickInserts/lookupname.flsnp" MadCap:snippetVariables="MPLD.mpld-lookupname:eyes$check," /> method with a <MadCap:snippetText src="../../0quickInserts/lookupname.flsnp" MadCap:snippetVariables="MPLD.mpld-lookupname:target," />.<MadCap:snippetText src="../../0quickInserts/lookupname.flsnp" MadCap:snippetVariables="MPLD.mpld-lookupname:target$window," />   parameter to check that page. The first parameter is the tag name of the checkpoint, the second specifies the area of the window to be checked - in this case - the entire window. By default the check is done using the global match level, and only the region visible in the viewport is checked (the page is not scrolled), we shall see in the examples below how to change these defaults for a given target.</p>
        <p class="sub-header">Example 2 : test two regions, with different sensitivities</p>
        <div> Now the test enters a user name and password and we want to check that the user name is displayed and that the password does not display the characters that are entered. If the test only needed to work with a single name and password we could simply test the entire window, but we want the test to work with any user name and any password. So we will:
        <ul class="bulleted-list"><li>Make the user name a region with a layout match level ,meaning that it will check that the field displays text, but will not try to match the specific characters in the baseline image.</li><li>Only check the first 8 characters of the password which are compulsory - i.e. Ignore the final characters of the password, so that Eyes will check the leftmost characters are "*" but ignore the right hand characters.</li></ul></div><pre class="mpld-section" data-mpld-section="usernamepassword"></pre>
        <p> <b>Notes</b></p>
        <ul class="numbered-list">
            <li>The check command is being used with two <MadCap:snippetText src="../../0quickInserts/lookupname.flsnp" MadCap:snippetVariables="MPLD.mpld-lookupname:target," />.<MadCap:snippetText src="../../0quickInserts/lookupname.flsnp" MadCap:snippetVariables="MPLD.mpld-lookupname:checksettings$region," />s (lines 2 and 6)&#160;instead of a <MadCap:snippetText src="../../0quickInserts/lookupname.flsnp" MadCap:snippetVariables="MPLD.mpld-lookupname:target," />.<MadCap:snippetText src="../../0quickInserts/lookupname.flsnp" MadCap:snippetVariables="MPLD.mpld-lookupname:checksettings$window," /> . You can call as many Targets as you want in a single <MadCap:snippetText src="../../0quickInserts/lookupname.flsnp" MadCap:snippetVariables="MPLD.mpld-lookupname:eyes$check," /> command, either as comma separated values as shown here or as an array.  The targets are totally independent, calling two targets in one call to <MadCap:snippetText src="../../0quickInserts/lookupname.flsnp" MadCap:snippetVariables="MPLD.mpld-lookupname:eyes$check," /> is equivalent to calling each target in a two separates calls to <MadCap:snippetText src="../../0quickInserts/lookupname.flsnp" MadCap:snippetVariables="MPLD.mpld-lookupname:eyes$check," />.  The advantage of using a single check command is that the window browser image is only captured once, and this can have a performance advantage in some cases.</li>
            <li> We've selected the login region using the <span class="code-label">WebElement username </span>because we  have already obtained it in order to inject the text. We could have used the <span class="code-label">By</span> selector instead as will be shown in other examples.</li>
            <li>The call to the method <MadCap:snippetText src="../../0quickInserts/lookupname.flsnp" MadCap:snippetVariables="MPLD.mpld-lookupname:checksettings$ignorecaret," /> tells Eyes to execute special processing that eliminates false alarms that may occur because of a blinking cursor. In this case we've called the method with an explicit parameter of "true" , see line 7 for an alternative way of coding this. </li>
            <li>In the case of the user name field, since we want the test to work with any user name we've used the method <MadCap:snippetText src="../../0quickInserts/lookupname.flsnp" MadCap:snippetVariables="MPLD.mpld-lookupname:checksettings$matchlevel," /> to specify that the entire region should be checked at the layout match level - i.e. Eyes will check that there is text, but the characters do not need to match. </li>
            <li>Since we have multiple targets, the tag name can be provided individually for each target using the <MadCap:snippetText src="../../0quickInserts/lookupname.flsnp" MadCap:snippetVariables="MPLD.mpld-lookupname:checksettings$withname," /> method (see also line 10). You don't have to specify a tag, but it is recommended you do so, especially if you have many checkpoints in a test.</li>
            <li>The second target is the password. Once again, since we already have the <span class="code-label">WebElement</span>, we've used it to define the region.</li>
            <li>As for the user name field, we call <MadCap:snippetText src="../../0quickInserts/lookupname.flsnp" MadCap:snippetVariables="MPLD.mpld-lookupname:checksettings$ignorecaret," />, this time however, we  call it without a parameter and the default true value will be used.</li>
            <li>The actual characters entered are hidden because this is a password field, so we can use the strict match level that checks that the *" characters are displayed. Here we have indicated the overall target match level by calling the <MadCap:snippetText src="../../0quickInserts/lookupname.flsnp" MadCap:snippetVariables="MPLD.mpld-lookupname:checksettings$strict," /> method without any parameters, instead of using a call to <MadCap:snippetText src="../../0quickInserts/lookupname.flsnp" MadCap:snippetVariables="MPLD.mpld-lookupname:checksettings$matchlevel," />. If the <MadCap:snippetText src="../../0quickInserts/lookupname.flsnp" MadCap:snippetVariables="MPLD.mpld-lookupname:checksettings$strict," /> method is called with a parameter, then it defines the match level for that specific region as opposed to all of the target area. </li>
            <li> Since the password can be a variable length, (any length over 8 characters) we call the <MadCap:snippetText src="../../0quickInserts/lookupname.flsnp" MadCap:snippetVariables="MPLD.mpld-lookupname:checksettings$ignore," /> method to ignore the characters on the right side of the password. The region to be ignore is specified using explicit pixels (left, top, width, height). The <MadCap:snippetText src="../../0quickInserts/lookupname.flsnp" MadCap:snippetVariables="MPLD.mpld-lookupname:checksettings$ignore," /> method can also take <span class="code-label">By </span>locators and <span class="code-label">WebElement</span>s as parameters, and can take multiple comma separated regions or an array of regions. We'll see examples of this later.</li>
        </ul>
        <p> Example 3 Floating regions, timeout and multiple regions</p>
        <p>The next checkpoint is taken after the login button is clicked and the system displays the main application window. </p><pre class="mpld-section" data-mpld-section="main-page-checkall"></pre>
        <ol class="numbered-list">
            <li>This page has many elements that are updated dynamically when the page is displayed, this means that they may be rendered with different values than the baseline image. Since we don't want these to be flagged as mismatches, We define these areas as regions with a "<span class="code-label">layout</span>" match level. We need a locator for all there regions, In this example, all the dynamic areas are annotated in the HTML&#160;with an attribute <i>volatile</i>  as follows:
<pre xml:space="preserve"><code>
   &lt;span data-volatile="1"&gt; this is dymanic data&lt;/span&gt;</code></pre>We create an array <span class="code-label">dynamicAreas </span>of<span class="code-label"> WebElements</span> that are then used as described below (line 5).</li>
            <li>This checkpoint checks the entire window, although it ignores certain parts of the window, as will be described below.</li>
            <li>We specify the <MadCap:snippetText src="../../0quickInserts/lookupname.flsnp" MadCap:snippetVariables="MPLD.mpld-lookupname:checksettings$fully," /> method so that the entire page will be checked, and not only the viewport. Eyes will use scrolling to display and take screenshots of the entire window content and will then stitch them together into one large image which will then be checked as a single unit.</li>
            <li> Now we use a call to the <MadCap:snippetText src="../../0quickInserts/lookupname.flsnp" MadCap:snippetVariables="MPLD.mpld-lookupname:checksettings$layout," /> method, whicg gets an array of <span class="code-label">WebElement</span>s that define the regions that should be checked with a layout match level.</li>
            <li>At the top and bottom of the of the table there are page links to jump to a given page. Depending on the size of the table 1, 2, 3 or 4 navigation buttons are displayed. Since the size of the table in the baseline and the checkpoint images can differ we choose to ignore these regions in this test, and to check the correct navigation button display functionality in a separate check (not shown here). We use an ignore for the lower page navigation buttons, the upper navigation buttons are handled in the next step.</li>
            <li><![CDATA[

                ]]><img class="block-image" src="../../Resources2/Images/examples/floating-and-ignore-region.png" /></li>
            <li>Since there can be from 1 to 4 pages links, the button and text that is to the left of the upper page navigation links ("Display 10 per page) will move horizontally depending on the number of page links to it's right. We've defined a floating region that instructs Eyes to search for this text in the entire area defined by the page links and text label and buttons. This has the effect of both allowing the test to appear anywhere in the region as well as ignoring the page navigation buttons. In this case, we don't need any vertical leeway so we have specified the first two parameters (upper and lower offset)&#160;as zero. We also illustrate another coding practice used by some teams - using a dedicated <span class="code-label">data-test</span> attribute to identify regions that require special treatment for testing instead of the element id whose existence and value is often determined by the application coding team - the HTML&#160;looks like this:
<pre><code>&lt;div data-test="displayPerPage" &gt;</code></pre></li>
            <li>We ignore the entire table body using the CSS&#160;selector, since it will be checked as a separate scrollable region in the next check point.</li>
            <li>When the browser navigates to the main application page, a progress bar is displayed until the table is fully populated. This means that there can be spurious false mismatches because the progress bar is moving. The <MadCap:snippetText src="../../0quickInserts/lookupname.flsnp" MadCap:snippetVariables="MPLD.mpld-lookupname:checksettings$timeout," /> method is available to solve situations where it takes time for the display to stabilize. When Eyes detects a mismatch it retries to capture the window image and match the image again since a mismatch may be caused by a screen that has not yet been fully rendered. By default, Eyes will retry capturing the image for two seconds or until a match is found. You can change the time Eyes retries the matching using the timeout method as done in this example.</li>
        </ol><a id="mpld-default-file" class="hidden" href="java/src/main/java/fluentexample.java"></a>
        <script type="text/javascript">/*<![CDATA[*/			
			var folder = "/docs/example-code";
			var myFile = "fluentexample"; 
			mpld.setDefaultFile(folder,myFile);
			/* data-mpld-lang, 	button name, 	sub folder name , 							file suffix */
			mpld.addLanguage( "java",				"Java",			"java/src/main/java/com/applitools/ekb","	.java");
		//	mpld.addLanguage("javascript",			"Javascript",	"javascript",								".js");
		//	mpld.addLanguage("ruby",		 	    "Ruby",	        "ruby",							        	".rb");
		//	mpld.addLanguage("python",		 	    "Python",	    "python",							        ".py");
		//	mpld.addLanguage("csharp",		 	    "C#",	  		"csharp",							        ".cs");
		//	mpld.addLanguage("php",		 	   		"PHP",	    	"PHP",							       		".php");
			/*]]>*/
		</script>
    </body>
</html>