<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
    </head>
    <body>
        <h1 class="title">Branching Notes</h1>
        <h2 class="title">&#160;Notes :&#160;About Branching</h2>
        <p>18:30 - start</p>
        <p>1. When workflows can take advanatage of branching ?</p>
        <p>1.1 Maintain multiple app versions in parallel v3.1 , v3.2 </p>
        <p>1.2 Multiple execution environments (e.g., staging vs production)</p>
        <p>1.3 Keeping “master” builds green</p>
        <p>1.3.1 Feature branches one branch per feature merge to master when it works</p>
        <p>1.3.2 Repository forks or clones, everyone works on a clone , and push to original so everyone sees the change</p>
        <p>2. A&#160;branch is a container of baselines lines</p>
        <p>2.1 of any app, test and environment </p>
        <p>2.2 of a specific team</p>
        <p>3. When you do setBranchName((name)&#160;- this defines the branch container that will store the baseline when you do a save (if not set then it's default)</p>
        <p>4. When you run a test eyes looks for a baseln in the following order</p>
        <p>4.1 the branch Bname</p>
        <p>4.2 if setParentBranchName(PBName) then in the PBName else is the default branch</p>
        <p>4.2 else it is a new baseline </p>
        <h2 class="title">Life without branches</h2>
        <p>In source systems a new version of code is saved whenever the uses saves a new version (e.g. in Git - "commit"). In Eyes a new version is saved every time the user runs a test and does save or adds some annotations and does save. There is no direct correspondence between the versions of the code and the versions of the baseline. At most what we can say is that at a particular point in time, the set of source code S, ran a visual UI test with the Visual baseline V&#160;and produced a set of results that are stored in a given baseline version B.</p>
        <h2 class="title">Using branches</h2>
        <p>In source code control, branches are used to allow concurrent development of multiple versions of the application. These might correspond to different versions of the application that are maintained in parallel, (e.g. Release and Beta versions), or the branches may be used as a sort of "sandbox" where each developer develops or fixes a feature in an independent copy of the source code, and when it is ready, merges the changed code back into the main master&#160;branch. Since potentially the content of a set of checkpoints may be different in the different version of the code, it makes sense to have separate baselines for each branch of the code, so that if a test is run in two branches, it will use and update a baseline, that represents the images that are being generated by the program in the that branch of the code. </p>
        <p>We already said the revisions of code and revisions of the baseline do not need to be synchronized, that there are simply points in time when they correspond to one another. For branches, it can be very convenient if there is a one to one correspondence between the branches that you use in your code development environment and those that you use in your visual UI testing environment .</p>
        <p>Eyes supports branches, as containers for a series of baseline versions. What this means is that for a given test can be run in different branches, and in the simplest case (as defined by its application name, test name and environment).</p>
    </body>
</html>