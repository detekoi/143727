<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="4117" MadCap:lastWidth="1866">
    <head>
    </head>
    <body>
        <h1 class="title">Test terminology</h1>
        <p>To fully utilize the power of <MadCap:variable name="General.ProductName" /> it is important to understand the concept of a <i>test</i>, and how it relates to other concepts such as <i>batch</i>, <i>baseline</i>, <i>test results</i> and <i>branches</i>.This article gives a high level of each of these concepts and how they are related.</p>
        <p>A <i>test</i> is the basic unit in Eyes. A test defines a sequence of screenshot images captured during a test run of an application.  A test is uniquely defined by an <i>app_name</i> and <i>test_name</i> which are defined when the test is run. Typically, a<i>test program</i> drives an application under test into various UI&#160;states, in each such state it executes a checkpoint and an image is captured of the application UI. The entire sequence of checkpoint images is then compared to a  sequence of images defined by a <i>test baseline </i> producing a <i>test result</i>. The test result consists of one or more <i>steps</i>, where each step can indicate that the checkpoint image and baseline image match, mismatch, a checkpoint image is missing, or there is a new checkpoint relative to the baseline sequence. The user reviews the test results and if there are steps that do not match resolves the differences by deciding which images should be in the updated baseline. The user can also add annotations to steps in the baseline. These annotations define that particular regions of some steps be processed in a special way - i.e. ignored or using a specific match level. </p>
        <p>The following diagram illustrates how these notions are related:</p><a data-lightbox="test-notation-simple.png" href="../topics/overview/resources/test-notation-simple.png"><img class="block-image" src="../topics/overview/resources/test-notation-simple.png" /></a>
        <h2 class="title">Multiple baselines</h2>
        <p>A&#160;test may have multiple baselines based on two independent criteria - the execution environment and the Branch.</p>
        <h2 class="title">Execution environment</h2>
        <p>The execution environment is defined by three attributes - the operating system, the browser and the viewport size (the window size). Since, potentially each execution environment can have a different look and feel, <MadCap:variable name="General.ProductName" /> allows a test to be associated with multiple baselines - one per  execution environment. When a test runs, <MadCap:variable name="General.ProductName" /> looks for a baseline which matches the  execution environment of the test. If it does not find one then it will (by default)&#160;create a new baseline for that  execution environment.</p>
        <h2 class="title">Branches</h2>
        <p><MadCap:variable name="General.ProductName" /> allows you to assign each baseline to a <i>branch</i>. A&#160;branch is simply a named collection of baselines. The notion of branches is used to support a typical software development workflow where  multiple versions of the software are being developed in parallel, for example, a team may concurrently develop and test a release version and a beta version, or it may develop each feature a separate branch. Typically these are managed using a source control system such as Git, where branches are used for each concurrent development of the system. Since the visual look of each version of the software may be different, but the test is often common (especially if it is a regression test) Eyes allows you to define that a test run should be made against a certain branch. In the simplest case this means that Eyes will look for a baseline that matches both the execution environment and the branch test results, and the updated baselines are also associated with the branch. <MadCap:snippetText src="../0quickInserts/_tbdref.flsnp" /><span class="tbd"> for more information about branching.</span></p>
        <p>The following figure expands the previous figure showing the multiple potential sources of baselines.</p><a data-lightbox="test-notation-multiple-baseline" href="../topics/overview/resources/test-notation-multiple-baseline.png"><img class="block-image" src="../topics/overview/resources/test-notation-multiple-baseline.png" /></a>
        <h2 class="title">Baseline History</h2>
        <p>Whenever you press the "Save" button in <MadCap:variable name="General.ProductUI" /> <MadCap:variable name="General.ProductName" /> creates a new <i>revision</i> of the baseline which contains any updates you made to the set of images defined for the baseline, and any annotations that you made. The previous revision of the baseline are stored in a "Baseline history". You can view the baseline history from the "Apps &amp;&#160;test pages". <MadCap:snippetText src="../0quickInserts/_tbdref.flsnp" /> <MadCap:variable name="General.ProductName" /> allows you to compare two revisions in the baseline history, and  allows you to clone an existing baseline revision into a new baseline revision in the same or a different branch. </p>
        <h2 class="title">Batches</h2>
        <p>The batch is a way of organizing multiple <i>batch runs</i> (and their <i>results</i>). A typical way to use batches is to have one test per feature, and then organize all the test results of an entire test suite into a batch. In addition you can use the batch as a way to collect together the results of a test that runs on multiple execution environments.</p>
    </body>
</html>