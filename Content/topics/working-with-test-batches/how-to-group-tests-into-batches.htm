<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:lang="en-us">
    <head><title></title>
        <link rel="stylesheet" href="/docs/Resources2/Stylesheets/mpld.css" />
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/default.min.css" />
    </head>
    <body>
        <h1 class="title">How to group tests into batches using the SDK</h1>
        <p>Eyes organizes the test results into a two-level hierarchy consisting of a list of batches, where each batch has a set of associated tests. Eyes provides the Batch mechanism to allow you to group your test runs in a way that is convenient to your workflow and organization. By default, every test runs in its own batch.</p>
        <p>This article explains how you can use the&#160;Eyes SDK&#160;to group the results of multiple test runs into a single batch so that they are displayed, summarized and can be managed together in the Test Manager. </p>
        <p>The standard way to batch tests together is to run them together in a single test suite. The SDK allows you to organize the tests into multiple batches, and you can use this for example to reflect the functional structure of your application. In some circumstances, it is not possible to run all the tests in the same run (technically in the same operating system process), for example, tests may be written in different languages, there may be a need to run on multiple platforms, or the test may be distributed for performance reasons. Eyes also provides you a way to batch together related tests even if they run separately, this is explained in the article 
		<a class="link" href="batching-tests-in-a-distributed-environment.htm">Batching Tests in a distributed environment</a>.</p>.
        <h2 class="title">The Batch Name</h2>
        <p>When you create a batch, you provide a string that represents the batch name. The string can have any value, for example, many Eyes customers use the Test Suite name. If you don’t explicitly create a batch, the batch name of a test is the test name. Test Manager will normally display the first 29 characters of the name so that most of the screen width is available for the current batch test information displayed in the right panel in the window. If you use names that are longer than this, then Test Manager provides you with a way to drag the batch list panel to the right to increase its width. It will show the expanded version of this panel when your cursor hovers over the batch list.</p>
        <h2 class="title">Assigning a Batch for tests running in a single program</h2>
        <p>If all your tests run in a single program and process, then the section below describes a convenient way to combine them into one batch. If your tests run as separate programs,&#160;and you want the results to be collected as a batch the this article explains ow to do this <MadCap:xref class="link" href="batching-tests-in-a-distributed-environment.htm">Batching Tests in a distributed environment.</MadCap:xref></p>
        <ol class="numbered-list">
            <li>Create an instance of the class&#160;BatchInfo</li><pre class="mpld-section" data-mpld-section="eyes-batch-construct"></pre>
            <li>Associate the&#160;batch&#160;instance with the Eyes instance</li><pre class="mpld-section" data-mpld-section="eyes-batch-setBatch"></pre>
            <li>Thereafter, any test that is created using that Eyes instance (by calling&#160;<code>eyes.open()</code>) will be associated with that batch.</li>
            <li>You can create and set a 2nd&#160;BatchInfo&#160;object on the same eye instance. Tests already open on that&#160;eyes&#160;instance will remain in their existing batch, and newly&#160;open()ed tests will belong to the new batch. Once a test has been associated with a batch, the association cannot be changed.</li>
        </ol>
        <p>If you want to run tests on multiple eyes instances (for example in order to run them on concurrent threads), you simply call&#160;<code>setBatch()</code>&#160;on each&#160;eyes&#160;instance using the same&#160;batchInfo&#160;object. For example, in the following test two tests are run, twice each on diffedrent browsers and viewport sizes and all the tests are are associated with the same batch:</p><pre class="mpld-section" data-mpld-section="eyes-batch-multiple"></pre>
        <p>When the Test programmer shares a&#160;single BatchInfo&#160;object with multiple tests, every single run of the test suite will create a&#160;new batch. You will see&#160;multiple&#160;entries in the Test Manager, one for each run of the test suite. All of these will have the same batch name, but each will have an independent run timestamp. The set of tests in each batch entry will never change. </p>
        <p>In the screenshot below you can see in the batch list on the right two entries generated by two runs of the test whose code snippets are shown above.On the right you see the runs from the second run, you can see that there are two test names "test 1 and "test 2" and the runs were on two types of browsers and with two different viewport sizes.</p>
        <img src="../../Resources2/Images/test-manager-screenshots/tm-batch-multiple.png" class="block-image" />
        <script src="/docs/scripts/mpld.js">
        </script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/highlight.min.js">
        </script>
        <script type="text/javascript">/*<![CDATA[*/			
			var folder = "/docs/example-code";
			var myFile = "HelloWorldBatchMultiple"; 
			mpld.setDefaultFile(folder,myFile);
			/* data-mpld-lang, 	button name, 	sub folder name , 							file suffix */
			mpld.addLanguage("java",				"Java",			"java/src/main/java/com/applitools/ekb","	.java");
			mpld.addLanguage("javascript",			"Javascript",	"javascript",								".js");
			mpld.addLanguage("ruby",		 	    "Ruby",	        "ruby",							        	".rb");
			mpld.addLanguage("python",		 	    "Python",	    "python",							        ".py");
			mpld.addLanguage("csharp",		 	    "C#",	  		"csharp",							        ".cs");
			mpld.addLanguage("php",		 	   		"PHP",	    	"PHP",							       		".php");
			/*]]>*/
			</script>
    </body>
</html>