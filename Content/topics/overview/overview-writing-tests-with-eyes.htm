<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:lang="en-us">
    <head><title></title>
        <link href="" rel="stylesheet" type="text/css" />
        <script src="../../scripts/jquery.min.js">
        </script>
        <link rel="stylesheet" href="../../Resources2/Stylesheets/mpld.css" />
        <script src="/docs/scripts/mpld.js">
        </script>
    </head>
    <body>
        <h1 class="title"><a name="top"></a>Writing tests with the Eyes SDK</h1>
        <p>Visual testing using Eyes is done by writing test code that sets up the UI into various states and calls the Eyes SDK to execute a checkpoint in each of these states. When a checkpoint is executed, it captures a screenshot and sends it to the Eyes Server, where it is matched, along with all the other screenshots, to a previously validated sequence of baseline images. <span class="tbd">See  for an description of this process</span>.</p>
        <p>Applitools provides SDKs for many programming languages and testing frameworks <a class="link" href="../general-concepts/supported-platforms.htm">Supported platforms</a>. Whichever language and framework you use, the general pattern of use is as follows:</p>
        <ol class="numbered-list">
            <li>First, create an instance of the <code>Eyes</code> class, and then make the following calls on that instance:</li>
            <li>Call the <code>open() </code> method to initialize the connections with the application driver and the <MadCap:variable name="Definitions.Eyes Server" />.</li>
            <li>For each required UI&#160;state, use the application driver to set up that state and then call one of the <code>check()</code> methods.</li>
            <li>Call the <code>close()</code> method to indicate to the <MadCap:variable name="Definitions.Eyes Server" /> that the test has completed and to get back the test results.</li>
        </ol>
        <p>A "test" in Eyes terminology refers to the entire sequence of <code>check()</code> calls made between the call to <code>open( )</code> and the call to <code>close( )</code>.</p>
        <p>In the sections that follow we will describe the main points of interest of each of these methods. We will also explain some related topics of exception handling and the use of Batches. We will build up the code line by line and will show full sample code at the end, in the section <a class="link" href="#128784209">Putting it all together</a>.</p>
        <h2 class="title"> Creating an Eyes instance</h2>
        <p>The first step to writing a visual UI test is to create an Eyes instance and to set up the API&#160;key that identifies your account:</p><pre id="snip-setup" class="mpld-section" data-mpld-section="eyes-setup"></pre>
        <p>If you have a dedicated cloud, then set <code>serverURL</code> to the URL of your server. If you don't have a dedicated cloud, then don't pass anything to the Eyes constructor, and the test will run on the Applitools public cloud. </p>
        <p>To run visual UI tests using Eyes, you need an API Key. If you don't have an API key, then obtain one as described in the article <a class="link" href="obtain-api-key.htm">How to obtain your API&#160;key</a> and then store it somewhere where your program can retrieve it. The example code above retrieves the <code>apiKey</code> from an environment variable. </p>
        <p>Once you've created the <code>eyes</code> instance, you use it to call various methods to implement tests. You can run multiple tests one after the other on a single eyes instance, or you can create multiple threads and create an eyes instance in each thread, and then the tests in each thread will execute concurrently.
			<!-- TGBD remove this ?
		< if each eyes instance runs against a different MadCap:variable name="Definitions.Eyes Server" />.--></p>
        <h2 class="title">The open() method</h2>
        <p>To initialize a test call the <code>open( ) </code>method <MadCap:snippetText src="../../0quickInserts/_tbdref.flsnp" />. The open() method takes four arguments: the application driver, the application name, the test name and the viewport size:</p><pre class="mpld-section" data-mpld-section="eyes-open"></pre>
        <p>How you create the driver <code>innerDriver</code> object depends on the test framework you are using to drive your application and to provide the Eyes SDK with screenshots. </p>
        <p>This example illustrates the creation of a Selenium ChromeDriver.&#160; Note that method <code>eyes.open</code> returns a <code>driver</code> object. This returned object is a wrapper of the <code>innerDriver</code>.You should use the <code>driver</code> object to make the calls you need to the web driver to simulate the application events.  Using a cloned object allows Eyes to know what user actions were performed before each visual checkpoint and therefore it can play them back in the Eyes Test Manager<span class="tbd">. For more information see <a class="link" href="../../2_ToDo/_3test-manager-playback.htm">test-manager-playback</a></span>. 
		<span data-mpld-lang="javascript">In JavaScript the  method <code>eyes.open</code> is asynchronous and returns a promise. The sample code shows how the<code>.then</code> construct is used to call a method <code>afterOpen(&#160;)</code> with the <code>driver</code> after the <code>open </code>has fully completed.
		</span></p>
        <p>The <code>viewportSize</code> parameter is used when the application runs in an environment that supports resizing the application window, such as a desktop browser. <code>viewportSize</code> defines the dimension of the displayed area of the window (the inner width and inner height of the browser) in which the application will run (1024 width, 768 height in this example). The <code>open()</code> call interacts with the driver to set the requested viewport size. For more information see <a class="link" href="../general-concepts/using-viewports-in-eyes.htm">Using viewports in Eyes</a> For environments that do not support resizing the application window, use the variant of the <code>open()</code> method that does not take a <code>viewportSize</code> parameter.</p>
        <p>The other parameters passed are two strings. The first should be the application name and the second the test name. Together, they uniquely identify the test. For example, this means that even if you have a test named "login test" for two different applications you can differentiate between them. </p>
        <p>The application, test name and viewport size, along with the browser and the operating system (which are obtained internally by the SDK), uniquely identify the baseline of the test. If you change the application or test name, or run a test with a different viewport size, on a different operating system or browser, a separate set of images will be used for the baseline when running in that environment.<span class="tbd"><MadCap:snippetText src="../../0quickInserts/_for-more-info.flsnp"></MadCap:snippetText> Baselines.</span></p>
        <h2 class="title">The check methods </h2>
        <p>The eyes SDK provides a family of "check" methods<span class="tbd"> (See  <a class="link tbd" href="../../2_ToDo/_2sdk-checkpoints-methods.htm">Methods to create checkpoints</a> )</span>&#160;that provide a powerful language for controlling various aspects of how the screenshot will be taken and processed.</p>
        <p>In the simplest case you can check the entire browser window with a call to<MadCap:snippetText src="../../0quickInserts/lookupname.flsnp" MadCap:snippetVariables="MPLD.mpld-lookupname:eyes$checkwindow," /> <code>checkWindow()</code> method as follows:</p><pre class="mpld-section" data-mpld-section="eyes-check"></pre>
        <p>The string passed to <code>checkWindow()</code> is typically a descriptive name that identifies the checkpoint.</p>
        <p>Note that the name tag is <u class="u">only</u> descriptive, and is not used internally by Eyes to uniquely identify the checkpoint. In fact, providing a name is optional and is not required to be unique. However, giving a unique name to every checkpoint is good practice, since it makes it easier for you to associate a check result you see in the Eyes Test Manager to the corresponding checkpoint in the code.</p>
        <h2 class="title">The close() method</h2>
        <p>After you have completed all the checks in a specific test you call the <code>close()</code> method <MadCap:snippetText src="../../0quickInserts/_tbdref.flsnp" /> to inform the Server that the test has ended and to obtain the test result. The returned <code>TestResults</code> object exposes various methods that provide detailed information about the outcome of the test. The following example illustrates how to print a simple summary.</p><pre class="mpld-section" data-mpld-section="eyes-close"></pre>
        <p>The returned <code>result</code> includes the status of the test (e.g. new test, passed or failed) and the URL&#160;to the test within the Eyes Test Manager. By copying the test URL&#160;to a browser, you can start the Eyes Test Manager preloaded with that test. You can then see the screenshots that were captured, the baseline images and the differences between them. Then you can take appropriate actions such as reporting bugs and updating the baseline.</p>
        <p>It is essential to understand that this result reflects the outcome of matching the sequence of screenshots captured by <u class="u_1">all</u> of the <code>check( )</code> calls in this test to the corresponding <u class="u_1">sequence</u> of images stored in the baseline, as opposed to checking each screenshot directly to a corresponding baseline image. This matching method allows you to add and remove checkpoints as necessary, and Eyes will automatically find:</p>
        <ul class="bulleted-list">
            <li>Checkpoints that match a baseline image</li>
            <li>Checkpoints that mismatch a baseline image</li>
            <li>Checkpoints that don't have a corresponding baseline image</li>
            <li>A baseline image that doesn't have a corresponding checkpoint image</li>
        </ul>
        <p>
            See <a class="link" href="../general-concepts/how-eyes-compares-checkpoints.htm">How Eyes compares checkpoints and baseline images </a></p>
        <p>The <code>close()</code> method takes an optional Boolean parameter that determines what happens if Eyes finds mismatches in the test. If the value is <code>false</code>, then a <code>TestResults</code> object is returned with the result information. If the parameter is <code>true</code>, or no parameter is passed, then an exception is raised. Typically, if you want your test framework to capture and handle the exception in the same way as any other assertion failure in your tests then pass "<code>true</code>. If you want to generate a custom report or otherwise process the test result programmatically upon test completion then pass <code>false</code>. </p>
        <p>If you chose the exception option, then the exception <code>DiffsFoundException</code> <code>will be</code><code> thrown</code> if Eyes detects mismatches. The exception details include the test URL&#160;for the test results in the Eyes Test Manager. </p>
        <p><span class="tbd">For a full explanation and a list of exceptions see </span><u class="tbd">sdk</u><u class="tbd">-exception-codes</u><span class="tbd">.</span>
        </p>
        <h2 class="title">Handling aborted tests</h2>
        <p>Apart from the exception thrown by the <code>close()</code> method described above, there may be other exceptions thrown by Eyes, by the application driver or by asserts you include in the test. These may have stopped the execution without completing all of the checkpoints, and without calling<code> eyes.close()</code>. </p>
        <p>It is critical that if a test has been opened and the “close” has been skipped because of an exception that the code calls the <code>eyes.abortIfNotClosed()</code> so that the server will know that some checks may have been skipped. When this happens, the Eyes Test Manager displays an aborted status for the impacted test. If the <code>close()</code> method was called, then <code>eyes.</code><code>abortIfNotClosed()</code> won't do anything.</p>
        <p>The following illustrates the typical pattern used to detect aborted tests: </p><pre class="mpld-section" data-mpld-section="eyes-exception"></pre>
        <h2 class="title">Batches</h2>
        <p>In the example we have shown so far, Eyes Test Manager will display the results of each test run as a separate entity. Eyes provides a way to group multiple tests into a unit called a "batch". Typically, batches are used to group tests that are run as part of a particular test suite or a build. </p>
        <p>The Eyes Test Manager interface is organized around multiple batches, each of which can consist of multiple test results.</p>
        <p> When you select an entry in the Batch List, it becomes the current batch, and you will see the results of all the test runs associated with that batch displayed in the main panel.</p>
        <p>The simplest way to group multiple tests into a batch is to create a <code>BatchInfo</code> object and then associate it with an eyes instance using the <code>setBatch( )</code> method. After that, all tests which are opened on that eyes instance will be part of that batch.</p><pre class="mpld-section" data-mpld-dir="HelloWorldBatch" data-mpld-file="HelloWorldBatch" data-mpld-section="eyes-batch"></pre>
        <p>If you don't call <code> eyes.setBatch()</code>&#160;then each test will appear in the Eyes Test Manager as a separate batch entry in the batch list, even if they were run on the same <code>eyes</code> instance. By calling <code> eyes.setBatch()</code>&#160;you are grouping all the tests together and this makes it easier to compare the results, find common issues, and in general manage the results of the tests. <MadCap:snippetText src="../../0quickInserts/_for-more-info.flsnp" /> <a class="link" href="../working-with-test-batches/working-with-test-batches-in-overview.htm">Working with test batches </a></p>
        <h2 class="title"><a name="128784209"></a>Putting it all together</h2>
        <p>The following program puts together everything we've discussed in this article. In the main method we see an eyes instance being created, the API&#160;key being set and a batch created and set. Then we call the runTest method twice, each time with a different viewport size. We print the result from each test using the method printResult. In the runTest method we show the calls to eyes.open, two checks and the call to close.</p><pre class="mpld-section" data-mpld-dir="HelloWorldBatch" data-mpld-file="HelloWorldBatch" data-mpld-section="all"></pre>
        <script type="text/javascript">/*<![CDATA[*/			
			var folder = "/docs/example-code";
			var myFile = "HelloWorldSimple"; 
			mpld.setDefaultFile(folder,myFile);
			/* data-mpld-lang, 	button name, 	sub folder name , 							file suffix */
			mpld.addLanguage( "java",				"Java",			"java/src/main/java/com/applitools/ekb","	.java");
			mpld.addLanguage("javascript",			"Javascript",	"javascript",								".js");
			mpld.addLanguage("ruby",		 	    "Ruby",	        "ruby",							        	".rb");
			mpld.addLanguage("python",		 	    "Python",	    "python",							        ".py");
			mpld.addLanguage("csharp",		 	    "C#",	  		"csharp",							        ".cs");
			mpld.addLanguage("php",		 	   		"PHP",	    	"PHP",							       		".php");
				/*]]>*/
			</script>
    </body>
</html>